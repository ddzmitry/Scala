package com.dzmitry.spark

import org.apache.log4j.{Level, Logger}
import org.apache.spark.sql.SparkSession
import scala.math._
object custumerSpendings {

  def parseLine(line: String) : (String,Float) = {
    val fields = line.split(",")
    val custid = fields(0)
    val amount = fields(2).toFloat
    (custid,amount)
  }
  def returnJustItemId(line: String): (String,Int) ={
    val fields = line.split(",")
    val productId = fields(1)
    (productId,1)
  }

  def CustIdItem(line: String): (String,String) ={
    val fields = line.split(",")
    val custid = fields(0)
    val productId = fields(1)
    (custid,productId)
  }
  def main(args: Array[String]): Unit = {

    Logger.getLogger("org").setLevel(Level.ERROR)
    val spark = SparkSession.builder
      .appName("Word Count")  // optional and will be autogenerated if not specified
      .master("local[*]")               // only for demo and testing purposes, use spark-submit instead
      .config("spark.sql.warehouse.dir", "target/spark-warehouse")
      .getOrCreate()

    val lines = spark.sparkContext.textFile("../customer-orders.csv")
    val custumerAmountRdd = lines.map(parseLine)
    val sumPerCustomer = custumerAmountRdd.reduceByKey((x,y) => (x + y))
      .map(x => (x._2,x._1))
//      sort By amount spend
      .sortByKey(false)
      .map(x => (x._2,x._1))

    spark.createDataFrame(sumPerCustomer).toDF("CustomerId","Spendings").show()

    val ItemsPurchasedTotal = lines.map(returnJustItemId)
    val SumItemCount = ItemsPurchasedTotal.reduceByKey((x,y)=>(x+y))
    val OrderdSumByCount = SumItemCount
      .reduceByKey((x,y) => (x + y))
      .map(x => (x._2,x._1))
      //      sort By amount spend
      .sortByKey(false)
      .map(x => (x._2,x._1))

    spark.createDataFrame(OrderdSumByCount).toDF("ItemId","TimesBought").show()


    import org.apache.spark.sql.functions.count
    import org.apache.spark.sql._
    val CustIdItemRdd = lines.map(CustIdItem)
    val dfCustItem = spark.createDataFrame(CustIdItemRdd).toDF("Id","Product")
    dfCustItem.createOrReplaceTempView("trade")
    val rdd4 = spark.sql("SELECT * from trade ")
    rdd4.show()
  }
}

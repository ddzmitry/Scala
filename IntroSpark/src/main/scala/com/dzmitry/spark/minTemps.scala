package com.dzmitry.spark

import org.apache.log4j.{Level, Logger}
import org.apache.spark.sql.SparkSession

import scala.math.min
import scala.math.max
object minTemps {

  def returnRdd(line:String): (String,String,Float) ={
    var values = line.split(",")
    val station = values(0)
    val entryType = values(2)
    val tempTof = values(3).toFloat * 0.1f * (9.0f / 5.0f) + 32.0f
    (station,entryType,tempTof)

  }

  def main(args: Array[String]): Unit = {

    Logger.getLogger("org").setLevel(Level.ERROR)
    val spark = SparkSession.builder
      .appName("My Spark Application")  // optional and will be autogenerated if not specified
      .master("local[*]")               // only for demo and testing purposes, use spark-submit instead
      .config("spark.sql.warehouse.dir", "target/spark-warehouse")
      .getOrCreate()
    import spark.implicits._

    val lines = spark.sparkContext.textFile("../1800.csv")
    val rddAll = lines.map(returnRdd)

    val minTemps = rddAll.filter(x => x._2 == "TMIN")



    val stationTemps = minTemps.map(x => (x._1, x._3.toFloat))

    // Reduce by stationID retaining the minimum temperature found
    val minTempsByStation = stationTemps.reduceByKey( (x,y) => min(x,y))

    // Collect, format, and print the results
    val results = minTempsByStation.collect()

    for (result <- results.sorted) {
      val station = result._1
      val temp = result._2
      val formattedTemp = f"$temp%.2f F"
      println(s"$station minimum temperature: $formattedTemp")
    }

    val maxTemps = rddAll.filter(x => x._2 == "TMAX")
    val stationmaxTemps = minTemps.map(x => (x._1, x._3.toFloat))

    val MaxTemps = stationmaxTemps.reduceByKey((x,y) => max(x,y)).collect()

    for (result <- MaxTemps.sorted) {
      val station = result._1
      val temp = result._2
      val formattedTemp = f"$temp%.2f F"
      println(s"$station max temperature: $formattedTemp")
    }


  }
}
